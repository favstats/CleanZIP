name: Build, Test, and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering from GitHub UI

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]  # Only macOS and Windows
        include:
          - os: macos-latest
            platform: macos
            extension: '.app'
          - os: windows-latest
            platform: windows
            extension: '.exe'
    continue-on-error: true  # Continue even if the platform-specific job fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9  # Ensure Python 3.9 is used

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wxPython PySimpleGUIWx pyinstaller

      - name: Generate version.txt for Windows
        if: matrix.os == 'windows-latest'
        run: |
          $TAG_VERSION="${{ github.ref_name }}"  # Get the tag version
          $versionInfo = @"
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=[$($TAG_VERSION.TrimStart('v').Replace('.',',')), 0],
    prodvers=[$($TAG_VERSION.TrimStart('v').Replace('.',',')), 0],
    mask=0x3f,
    flags=0x0,
    OS=0x4,
    fileType=0x1,
    subtype=0x0,
    date=(0,0)
  ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [
        StringStruct(u'CompanyName', u'University of Amsterdam'),
        StringStruct(u'FileDescription', u'Delete Media From ZIP'),
        StringStruct(u'FileVersion', u'$($TAG_VERSION.TrimStart('v'))'),
        StringStruct(u'InternalName', u'DeleteMediaFromZIP'),
        StringStruct(u'LegalCopyright', u'Â© Dr. Fabio Votta. Distributed under the MIT License.'),
        StringStruct(u'OriginalFilename', u'DeleteMediaFromZIP.exe'),
        StringStruct(u'ProductName', u'Delete Media From ZIP'),
        StringStruct(u'ProductVersion', u'$($TAG_VERSION.TrimStart('v'))')
        ]
      )
      ]
    ),
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
"@
          $versionInfo | Set-Content -Path version.txt
        shell: pwsh

      - name: Build executable with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed delete_media_from_zip.py --version-file version.txt

      - name: Zip the .app bundle (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller --onefile --windowed delete_media_from_zip.py
          zip -r dist/delete_media_from_zip.zip dist/delete_media_from_zip.app

      - name: Verify build output (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem dist

      - name: Archive build artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: delete_media_from_zip_windows
          path: dist/delete_media_from_zip.exe

      - name: Archive build artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: delete_media_from_zip_macos
          path: dist/delete_media_from_zip.zip

  create-release:
    name: Create GitHub Release
    needs: build-and-test
    runs-on: ubuntu-latest  # The release creation can still run on ubuntu-latest
    steps:
      - name: Download build artifacts for macOS
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: delete_media_from_zip_macos
          path: builds/macos/

      - name: Download build artifacts for Windows
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: delete_media_from_zip_windows
          path: builds/windows/

      - name: Create Release
        if: always()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}  # Use the actual tag name
          name: Release ${{ github.ref_name }}  # Name the release after the tag
          body: |
            ## Changelog
            - Auto-generated release for ${{ github.ref_name }}

            ### Assets
            - Windows (.exe)
            - macOS (.zip)
          files: |
            builds/windows/delete_media_from_zip.exe
            builds/macos/delete_media_from_zip.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
