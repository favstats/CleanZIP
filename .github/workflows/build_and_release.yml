name: Build, Test, and Release

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering from GitHub UI

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]  # Now includes Ubuntu, macOS, and Windows
        include:
          - os: ubuntu-latest
            platform: linux
            extension: ''
          - os: macos-latest
            platform: macos
            extension: '.app'
          - os: windows-latest
            platform: windows
            extension: '.exe'
    continue-on-error: true  # Continue even if the platform-specific job fails

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: 3.9  # Ensure Python 3.9 is used

      - name: Install dependencies on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libunwind-dev
          sudo apt-get install -y python3-dev python3-pip python3-tk build-essential libgtk-3-dev libjpeg-dev libtiff-dev libsdl1.2-dev libnotify-dev freeglut3-dev libsm-dev libwebkit2gtk-4.0-dev libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install wxPython PySimpleGUIWx pyinstaller

      - name: Install dependencies on macOS and Windows
        if: matrix.os != 'ubuntu-latest'
        run: |
          python -m pip install --upgrade pip
          pip install wxPython PySimpleGUIWx pyinstaller

      - name: Generate version.txt for Windows
        if: matrix.os == 'windows-latest'
        run: |
          $env:TAG_VERSION = "${{ github.ref_name }}"  # Get the tag version
          $VERSION_NUMBERS = $env:TAG_VERSION.TrimStart('v').Replace('.',', ')
          (Get-Content version_template.txt) -replace '{{VERSION_NUMBERS}}', $VERSION_NUMBERS -replace '{{VERSION_STRING}}', $env:TAG_VERSION | Set-Content version.txt
        shell: pwsh

      - name: Build executable with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile --windowed CleanZIP.py --version-file version.txt

      - name: Build executable with PyInstaller on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          pyinstaller --onefile --windowed CleanZIP.py

      - name: Zip the .app bundle (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          pyinstaller --onefile --windowed CleanZIP.py
          zip -r dist/CleanZIP.zip dist/CleanZIP.app

      - name: Verify build output (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem dist

      - name: Archive build artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: CleanZIP_windows
          path: dist/CleanZIP.exe

      - name: Archive build artifact (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: CleanZIP_macos
          path: dist/CleanZIP.zip

      - name: Archive build artifact (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: CleanZIP_linux
          path: dist/CleanZIP

  create-release:
    name: Create GitHub Release
    needs: build-and-test
    runs-on: ubuntu-latest  # The release creation can still run on ubuntu-latest
    steps:
      - name: Download build artifacts for macOS
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: CleanZIP_macos
          path: builds/macos/

      - name: Download build artifacts for Windows
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: CleanZIP_windows
          path: builds/windows/

      - name: Download build artifacts for Ubuntu
        if: always()
        uses: actions/download-artifact@v3
        with:
          name: CleanZIP_linux
          path: builds/linux/

      - name: Create Release
        if: always()
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}  # Use the actual tag name
          name: Release ${{ github.ref_name }}  # Name the release after the tag
          body: |
            ## Changelog
            - Auto-generated release for ${{ github.ref_name }}

            ### Assets
            - Windows (.exe)
            - macOS (.zip)
            - Linux (executable)
          files: |
            builds/windows/CleanZIP.exe
            builds/macos/CleanZIP.zip
            builds/linux/CleanZIP
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
